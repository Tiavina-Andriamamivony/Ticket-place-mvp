// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
model Utilisateur {
  id              Int         @id @default(autoincrement())
  nom             String
  prenom          String
  email           String      @unique
  motDePasse      String
  telephone       String?
  role            Role        @default(CLIENT)
  dateInscription DateTime    @default(now())
  actif           Boolean     @default(true)
  
  // Relations
  evenements      Evenement[]
  commandes       Commande[]

  @@map("utilisateurs")
}

model Evenement {
  id             Int       @id @default(autoincrement())
  nom            String
  description    String    @db.Text
  dateDebut      DateTime
  dateFin        DateTime
  publie         Boolean   @default(false)
  capaciteMax    Int
  imageUrl       String?
  
  // Relations
  organisateurId Int
  organisateur   Utilisateur @relation(fields: [organisateurId], references: [id])
  
  lieuId         Int
  lieu           Lieu      @relation(fields: [lieuId], references: [id])
  
  categorieId    Int
  categorie      Categorie @relation(fields: [categorieId], references: [id])
  
  tickets        Ticket[]

  @@map("evenements")
}

model Ticket {
  id                 Int       @id @default(autoincrement())
  type               String
  prix               Decimal   @db.Decimal(10, 2)
  quantiteDisponible Int
  debutVente         DateTime
  finVente           DateTime
  transferable       Boolean   @default(true)
  
  // Relations
  evenementId        Int
  evenement          Evenement @relation(fields: [evenementId], references: [id])
  
  lignesCommande     LigneCommande[]

  @@map("tickets")
}

model Commande {
  id            Int       @id @default(autoincrement())
  dateCommande  DateTime  @default(now())
  montantTotal  Decimal   @db.Decimal(10, 2)
  statut        StatutCommande @default(EN_ATTENTE)
  reference     String    @unique
  
  // Relations
  utilisateurId Int
  utilisateur   Utilisateur @relation(fields: [utilisateurId], references: [id])
  
  lignesCommande LigneCommande[]
  paiement       Paiement?

  @@map("commandes")
}

model LigneCommande {
  id            Int       @id @default(autoincrement())
  quantite      Int
  prixUnitaire  Decimal   @db.Decimal(10, 2)
  
  // Relations
  commandeId    Int
  commande      Commande  @relation(fields: [commandeId], references: [id])
  
  ticketId      Int
  ticket        Ticket    @relation(fields: [ticketId], references: [id])

  @@map("lignes_commande")
}

model Lieu {
  id            Int       @id @default(autoincrement())
  nom           String
  adresse       String
  ville         String
  codePostal    String
  pays          String
  capacite      Int
  coordonneesGPS String?
  
  // Relations
  evenements    Evenement[]

  @@map("lieux")
}

model Categorie {
  id          Int       @id @default(autoincrement())
  nom         String    @unique
  description String?   @db.Text
  couleur     String?
  
  // Relations
  evenements  Evenement[]

  @@map("categories")
}

model Paiement {
  id                   Int       @id @default(autoincrement())
  montant              Decimal   @db.Decimal(10, 2)
  datePaiement         DateTime  @default(now())
  methodePaiement      MethodePaiement
  statut               StatutPaiement @default(EN_ATTENTE)
  referenceTransaction String    @unique
  
  // Relations
  commandeId           Int       @unique
  commande             Commande  @relation(fields: [commandeId], references: [id])

  @@map("paiements")
}

enum Role {
  ADMIN
  ORGANISATEUR
  CLIENT
}

enum StatutCommande {
  EN_ATTENTE
  CONFIRMEE
  ANNULEE
  REMBOURSEE
}

enum StatutPaiement {
  EN_ATTENTE
  COMPLETE
  ECHOUE
  REMBOURSE
}

enum MethodePaiement {
  CARTE_CREDIT
  PAYPAL
  VIREMENT
  AUTRE
}


